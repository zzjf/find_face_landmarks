// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence_face_landmarks.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sequence_face_landmarks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sfl {
namespace io {

namespace {

const ::google::protobuf::Descriptor* Sequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sequence_5fface_5flandmarks_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sequence_5fface_5flandmarks_2eproto() {
  protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sequence_face_landmarks.proto");
  GOOGLE_CHECK(file != NULL);
  Sequence_descriptor_ = file->message_type(0);
  static const int Sequence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, input_path_),
  };
  Sequence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sequence_descriptor_,
      Sequence::default_instance_,
      Sequence_offsets_,
      -1,
      -1,
      -1,
      sizeof(Sequence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, _is_default_instance_));
  Frame_descriptor_ = file->message_type(1);
  static const int Frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, faces_),
  };
  Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      -1,
      -1,
      -1,
      sizeof(Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _is_default_instance_));
  Face_descriptor_ = file->message_type(2);
  static const int Face_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, bbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, landmarks_),
  };
  Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_descriptor_,
      Face::default_instance_,
      Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _is_default_instance_));
  BoundingBox_descriptor_ = file->message_type(3);
  static const int BoundingBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, height_),
  };
  BoundingBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundingBox_descriptor_,
      BoundingBox::default_instance_,
      BoundingBox_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoundingBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _is_default_instance_));
  Point_descriptor_ = file->message_type(4);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sequence_5fface_5flandmarks_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sequence_descriptor_, &Sequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_descriptor_, &Face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundingBox_descriptor_, &BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sequence_5fface_5flandmarks_2eproto() {
  delete Sequence::default_instance_;
  delete Sequence_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete Face::default_instance_;
  delete Face_reflection_;
  delete BoundingBox::default_instance_;
  delete BoundingBox_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
}

void protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035sequence_face_landmarks.proto\022\006sfl.io\""
    "=\n\010Sequence\022\035\n\006frames\030\001 \003(\0132\r.sfl.io.Fra"
    "me\022\022\n\ninput_path\030\002 \001(\t\"O\n\005Frame\022\n\n\002id\030\001 "
    "\001(\r\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\033\n\005fa"
    "ces\030\004 \003(\0132\014.sfl.io.Face\"W\n\004Face\022\n\n\002id\030\001 "
    "\001(\r\022!\n\004bbox\030\002 \001(\0132\023.sfl.io.BoundingBox\022 "
    "\n\tlandmarks\030\003 \003(\0132\r.sfl.io.Point\"G\n\013Boun"
    "dingBox\022\014\n\004left\030\001 \001(\005\022\013\n\003top\030\002 \001(\005\022\r\n\005wi"
    "dth\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\"\035\n\005Point\022\t\n\001x\030"
    "\001 \001(\005\022\t\n\001y\030\002 \001(\005b\006proto3", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sequence_face_landmarks.proto", &protobuf_RegisterTypes);
  Sequence::default_instance_ = new Sequence();
  Frame::default_instance_ = new Frame();
  Face::default_instance_ = new Face();
  BoundingBox::default_instance_ = new BoundingBox();
  Point::default_instance_ = new Point();
  Sequence::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  Face::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sequence_5fface_5flandmarks_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sequence_5fface_5flandmarks_2eproto {
  StaticDescriptorInitializer_sequence_5fface_5flandmarks_2eproto() {
    protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  }
} static_descriptor_initializer_sequence_5fface_5flandmarks_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sequence::kFramesFieldNumber;
const int Sequence::kInputPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sequence::Sequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sfl.io.Sequence)
}

void Sequence::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Sequence::Sequence(const Sequence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sfl.io.Sequence)
}

void Sequence::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:sfl.io.Sequence)
  SharedDtor();
}

void Sequence::SharedDtor() {
  input_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Sequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sequence_descriptor_;
}

const Sequence& Sequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  return *default_instance_;
}

Sequence* Sequence::default_instance_ = NULL;

Sequence* Sequence::New(::google::protobuf::Arena* arena) const {
  Sequence* n = new Sequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:sfl.io.Sequence)
  input_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frames_.Clear();
}

bool Sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sfl.io.Sequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sfl.io.Frame frames = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_frames;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_input_path;
        break;
      }

      // optional string input_path = 2;
      case 2: {
        if (tag == 18) {
         parse_input_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_path().data(), this->input_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sfl.io.Sequence.input_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sfl.io.Sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sfl.io.Sequence)
  return false;
#undef DO_
}

void Sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sfl.io.Sequence)
  // repeated .sfl.io.Frame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  // optional string input_path = 2;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), this->input_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sfl.io.Sequence.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:sfl.io.Sequence)
}

::google::protobuf::uint8* Sequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sfl.io.Sequence)
  // repeated .sfl.io.Frame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frames(i), false, target);
  }

  // optional string input_path = 2;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), this->input_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sfl.io.Sequence.input_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sfl.io.Sequence)
  return target;
}

int Sequence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sfl.io.Sequence)
  int total_size = 0;

  // optional string input_path = 2;
  if (this->input_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_path());
  }

  // repeated .sfl.io.Frame frames = 1;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sfl.io.Sequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Sequence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Sequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sfl.io.Sequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sfl.io.Sequence)
    MergeFrom(*source);
  }
}

void Sequence::MergeFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sfl.io.Sequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  frames_.MergeFrom(from.frames_);
  if (from.input_path().size() > 0) {

    input_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_path_);
  }
}

void Sequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sfl.io.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sfl.io.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {

  return true;
}

void Sequence::Swap(Sequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sequence::InternalSwap(Sequence* other) {
  frames_.UnsafeArenaSwap(&other->frames_);
  input_path_.Swap(&other->input_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sequence_descriptor_;
  metadata.reflection = Sequence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sequence

// repeated .sfl.io.Frame frames = 1;
int Sequence::frames_size() const {
  return frames_.size();
}
void Sequence::clear_frames() {
  frames_.Clear();
}
const ::sfl::io::Frame& Sequence::frames(int index) const {
  // @@protoc_insertion_point(field_get:sfl.io.Sequence.frames)
  return frames_.Get(index);
}
::sfl::io::Frame* Sequence::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:sfl.io.Sequence.frames)
  return frames_.Mutable(index);
}
::sfl::io::Frame* Sequence::add_frames() {
  // @@protoc_insertion_point(field_add:sfl.io.Sequence.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::sfl::io::Frame >*
Sequence::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:sfl.io.Sequence.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::sfl::io::Frame >&
Sequence::frames() const {
  // @@protoc_insertion_point(field_list:sfl.io.Sequence.frames)
  return frames_;
}

// optional string input_path = 2;
void Sequence::clear_input_path() {
  input_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Sequence::input_path() const {
  // @@protoc_insertion_point(field_get:sfl.io.Sequence.input_path)
  return input_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sequence::set_input_path(const ::std::string& value) {
  
  input_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sfl.io.Sequence.input_path)
}
 void Sequence::set_input_path(const char* value) {
  
  input_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sfl.io.Sequence.input_path)
}
 void Sequence::set_input_path(const char* value, size_t size) {
  
  input_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sfl.io.Sequence.input_path)
}
 ::std::string* Sequence::mutable_input_path() {
  
  // @@protoc_insertion_point(field_mutable:sfl.io.Sequence.input_path)
  return input_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Sequence::release_input_path() {
  // @@protoc_insertion_point(field_release:sfl.io.Sequence.input_path)
  
  return input_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Sequence::set_allocated_input_path(::std::string* input_path) {
  if (input_path != NULL) {
    
  } else {
    
  }
  input_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_path);
  // @@protoc_insertion_point(field_set_allocated:sfl.io.Sequence.input_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kIdFieldNumber;
const int Frame::kWidthFieldNumber;
const int Frame::kHeightFieldNumber;
const int Frame::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sfl.io.Frame)
}

void Frame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sfl.io.Frame)
}

void Frame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  width_ = 0u;
  height_ = 0u;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:sfl.io.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:sfl.io.Frame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Frame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Frame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, width_);
  height_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  faces_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sfl.io.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_faces;
        break;
      }

      // repeated .sfl.io.Face faces = 4;
      case 4: {
        if (tag == 34) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sfl.io.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sfl.io.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sfl.io.Frame)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // repeated .sfl.io.Face faces = 4;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sfl.io.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sfl.io.Frame)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // repeated .sfl.io.Face faces = 4;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->faces(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sfl.io.Frame)
  return target;
}

int Frame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sfl.io.Frame)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // repeated .sfl.io.Face faces = 4;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sfl.io.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Frame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sfl.io.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sfl.io.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sfl.io.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  faces_.MergeFrom(from.faces_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sfl.io.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sfl.io.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  std::swap(id_, other->id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional uint32 id = 1;
void Frame::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Frame::id() const {
  // @@protoc_insertion_point(field_get:sfl.io.Frame.id)
  return id_;
}
 void Frame::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Frame.id)
}

// optional uint32 width = 2;
void Frame::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 Frame::width() const {
  // @@protoc_insertion_point(field_get:sfl.io.Frame.width)
  return width_;
}
 void Frame::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Frame.width)
}

// optional uint32 height = 3;
void Frame::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 Frame::height() const {
  // @@protoc_insertion_point(field_get:sfl.io.Frame.height)
  return height_;
}
 void Frame::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Frame.height)
}

// repeated .sfl.io.Face faces = 4;
int Frame::faces_size() const {
  return faces_.size();
}
void Frame::clear_faces() {
  faces_.Clear();
}
const ::sfl::io::Face& Frame::faces(int index) const {
  // @@protoc_insertion_point(field_get:sfl.io.Frame.faces)
  return faces_.Get(index);
}
::sfl::io::Face* Frame::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:sfl.io.Frame.faces)
  return faces_.Mutable(index);
}
::sfl::io::Face* Frame::add_faces() {
  // @@protoc_insertion_point(field_add:sfl.io.Frame.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::sfl::io::Face >*
Frame::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:sfl.io.Frame.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::sfl::io::Face >&
Frame::faces() const {
  // @@protoc_insertion_point(field_list:sfl.io.Frame.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kIdFieldNumber;
const int Face::kBboxFieldNumber;
const int Face::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sfl.io.Face)
}

void Face::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  bbox_ = const_cast< ::sfl::io::BoundingBox*>(&::sfl::io::BoundingBox::default_instance());
}

Face::Face(const Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sfl.io.Face)
}

void Face::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  bbox_ = NULL;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:sfl.io.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != default_instance_) {
    delete bbox_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:sfl.io.Face)
  id_ = 0u;
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
  landmarks_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sfl.io.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bbox;
        break;
      }

      // optional .sfl.io.BoundingBox bbox = 2;
      case 2: {
        if (tag == 18) {
         parse_bbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_landmarks;
        break;
      }

      // repeated .sfl.io.Point landmarks = 3;
      case 3: {
        if (tag == 26) {
         parse_landmarks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_landmarks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sfl.io.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sfl.io.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sfl.io.Face)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .sfl.io.BoundingBox bbox = 2;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bbox_, output);
  }

  // repeated .sfl.io.Point landmarks = 3;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->landmarks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sfl.io.Face)
}

::google::protobuf::uint8* Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sfl.io.Face)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .sfl.io.BoundingBox bbox = 2;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bbox_, false, target);
  }

  // repeated .sfl.io.Point landmarks = 3;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->landmarks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sfl.io.Face)
  return target;
}

int Face::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sfl.io.Face)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .sfl.io.BoundingBox bbox = 2;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bbox_);
  }

  // repeated .sfl.io.Point landmarks = 3;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sfl.io.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Face* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sfl.io.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sfl.io.Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sfl.io.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  landmarks_.MergeFrom(from.landmarks_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_bbox()) {
    mutable_bbox()->::sfl::io::BoundingBox::MergeFrom(from.bbox());
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sfl.io.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sfl.io.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  std::swap(id_, other->id_);
  std::swap(bbox_, other->bbox_);
  landmarks_.UnsafeArenaSwap(&other->landmarks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional uint32 id = 1;
void Face::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Face::id() const {
  // @@protoc_insertion_point(field_get:sfl.io.Face.id)
  return id_;
}
 void Face::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Face.id)
}

// optional .sfl.io.BoundingBox bbox = 2;
bool Face::has_bbox() const {
  return !_is_default_instance_ && bbox_ != NULL;
}
void Face::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
}
const ::sfl::io::BoundingBox& Face::bbox() const {
  // @@protoc_insertion_point(field_get:sfl.io.Face.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
::sfl::io::BoundingBox* Face::mutable_bbox() {
  
  if (bbox_ == NULL) {
    bbox_ = new ::sfl::io::BoundingBox;
  }
  // @@protoc_insertion_point(field_mutable:sfl.io.Face.bbox)
  return bbox_;
}
::sfl::io::BoundingBox* Face::release_bbox() {
  // @@protoc_insertion_point(field_release:sfl.io.Face.bbox)
  
  ::sfl::io::BoundingBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
void Face::set_allocated_bbox(::sfl::io::BoundingBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sfl.io.Face.bbox)
}

// repeated .sfl.io.Point landmarks = 3;
int Face::landmarks_size() const {
  return landmarks_.size();
}
void Face::clear_landmarks() {
  landmarks_.Clear();
}
const ::sfl::io::Point& Face::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:sfl.io.Face.landmarks)
  return landmarks_.Get(index);
}
::sfl::io::Point* Face::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:sfl.io.Face.landmarks)
  return landmarks_.Mutable(index);
}
::sfl::io::Point* Face::add_landmarks() {
  // @@protoc_insertion_point(field_add:sfl.io.Face.landmarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::sfl::io::Point >*
Face::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:sfl.io.Face.landmarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::sfl::io::Point >&
Face::landmarks() const {
  // @@protoc_insertion_point(field_list:sfl.io.Face.landmarks)
  return landmarks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kLeftFieldNumber;
const int BoundingBox::kTopFieldNumber;
const int BoundingBox::kWidthFieldNumber;
const int BoundingBox::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sfl.io.BoundingBox)
}

void BoundingBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sfl.io.BoundingBox)
}

void BoundingBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  width_ = 0u;
  height_ = 0u;
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:sfl.io.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBox_descriptor_;
}

const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New(::google::protobuf::Arena* arena) const {
  BoundingBox* n = new BoundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:sfl.io.BoundingBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoundingBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoundingBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sfl.io.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sfl.io.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sfl.io.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sfl.io.BoundingBox)
  // optional int32 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:sfl.io.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sfl.io.BoundingBox)
  // optional int32 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sfl.io.BoundingBox)
  return target;
}

int BoundingBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sfl.io.BoundingBox)
  int total_size = 0;

  // optional int32 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // optional int32 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sfl.io.BoundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoundingBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sfl.io.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sfl.io.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sfl.io.BoundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sfl.io.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sfl.io.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBox_descriptor_;
  metadata.reflection = BoundingBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundingBox

// optional int32 left = 1;
void BoundingBox::clear_left() {
  left_ = 0;
}
 ::google::protobuf::int32 BoundingBox::left() const {
  // @@protoc_insertion_point(field_get:sfl.io.BoundingBox.left)
  return left_;
}
 void BoundingBox::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.BoundingBox.left)
}

// optional int32 top = 2;
void BoundingBox::clear_top() {
  top_ = 0;
}
 ::google::protobuf::int32 BoundingBox::top() const {
  // @@protoc_insertion_point(field_get:sfl.io.BoundingBox.top)
  return top_;
}
 void BoundingBox::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.BoundingBox.top)
}

// optional uint32 width = 3;
void BoundingBox::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:sfl.io.BoundingBox.width)
  return width_;
}
 void BoundingBox::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.BoundingBox.width)
}

// optional uint32 height = 4;
void BoundingBox::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:sfl.io.BoundingBox.height)
  return height_;
}
 void BoundingBox::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.BoundingBox.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sfl.io.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sfl.io.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:sfl.io.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fface_5flandmarks_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:sfl.io.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sfl.io.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sfl.io.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sfl.io.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sfl.io.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:sfl.io.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sfl.io.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sfl.io.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sfl.io.Point)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sfl.io.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sfl.io.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sfl.io.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sfl.io.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sfl.io.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sfl.io.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional int32 x = 1;
void Point::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:sfl.io.Point.x)
  return x_;
}
 void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Point.x)
}

// optional int32 y = 2;
void Point::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:sfl.io.Point.y)
  return y_;
}
 void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sfl.io.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace sfl

// @@protoc_insertion_point(global_scope)
